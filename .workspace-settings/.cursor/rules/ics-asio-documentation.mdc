---
description: This rule triggers when asked to generate documentation for ASIO bots
globs:
alwaysApply: true
---

# ASIO Bot Documentation Generator Rule

## Trigger
This rule triggers when asked to generate documentation for ASIO bots.

## Purpose
This rule guides the AI to generate comprehensive IT Glue documentation for ConnectWise ASIO bots suitable for L1 Service Desk users.

## Usage Instructions

### How to Use

1. **Open the bot Python file** you want to document (e.g., `AAD - User management.py`)

2. **Invoke this rule** by asking Cursor:
   ```
   @asio-bot-documenter Generate complete IT Glue documentation for this ASIO bot
   ```

## AI Instructions for Documentation Generation

When generating documentation for an ASIO bot, you MUST:

### 1. Code Analysis Phase
- Read the entire Python script
- Extract `bot_name` variable, and note that even if the bot name starts with 'MIT,' it is still client-facing
- Identify all `input.get_value()` calls but ignore field IDs
- Map all operations from `if operation == "..."` blocks
- Extract all functions defined (these are the bot's capabilities)
- Identify which ASIO bundles are used (Graph, EXO, CWPSA, DeviceAD, EmailMasking)
- List all `record_result()` and error messages
- Note any company-specific logic (MIT authentication, etc.)
- Note that any Python script with a title prefix of "MIT-" does NOT mean it is only used for that client, and is client agnostic.

### 2. Documentation Structure
Follow the ASIO-BOT-DOCUMENTATION-TEMPLATE.md structure exactly:
- Fill in ALL placeholders: `{BOT_NAME}`, `{DATE}`, `{BOT_PATH}`, etc.
- Do NOT leave any `{placeholder}` unfilled
- Replace template examples with actual data from the code

### 3. Required Sections (with extraction logic)

#### Overview Section
- **Purpose:** Derive from `bot_name` and operation types
- **When to Use:** Infer from operation names
- **Bot Classification:** 
  - Environment: Check if file is in `Cloud/` or `Device/`
  - Service Type: Extract from bot name prefix (AAD, EXO, AD, CWPSA, etc.)

#### Required Inputs Section
- Extract from ALL `input.get_value()` calls
- Format as table with Field Names only, ignore Field IDs and do not place them in the output document
- Determine if mandatory or optional based on code logic
- Include validation rules from `if not {variable}:` checks
- For Operation-specifc Inputs, ensure to include a list of Operations where the Input is mandatory under the 'Mandatory For' column in The 'Operation-Specific Mandatory Inputs' table

#### Operations Section
- Extract from `if operation == "..."` blocks
- Describe process flow by analyzing code within each operation block
- Include actual function calls made (e.g., `create_aad_user`, `disable_aad_user`)

#### Troubleshooting Section
- Extract from all `log.error()`, `log.warning()`, and `record_result(ResultLevel.WARNING, ...)` messages
- Create issue entries for each unique error condition
- Provide resolution based on code context

#### Error Messages Section
- Create table of ALL string literals in `record_result()` and `log.error()` calls
- Map to their code context for meaning
- Suggest resolutions based on surrounding error-handling logic

#### Dependencies Section
- Identify bundles used:
  - Graph: if `get_graph_token()` present
  - EXO: if `get_exo_token()` present
  - CWPSA: if `get_company_data_from_ticket()` present
  - DeviceAD: if `execute_powershell()` and `get_ad_user_data()` present
  - EmailMasking: if `send_email()` present
- List all imports from the script
- Note Azure Key Vault secrets referenced

#### Examples Section
- Create realistic examples for EACH operation
- Use actual field IDs from the code
- Show expected log output based on `log.info()` statements in code

### 4. L1 Service Desk Focus
Write for a technician who:
- Knows how to access ConnectWise RPA
- Can copy/paste values into forms
- Understands basic concepts but needs step-by-step guidance
- Should NOT need to understand Python, APIs, or authentication flows

### 5. Formatting Requirements
- Use clear headings and subheadings
- Include checkboxes `- [ ]` for checklists
- Use tables for structured data
- Dont use emojis
- Use code blocks with appropriate syntax highlighting
- Use `**bold**` for important terms
- Use `> quotes` for important notes

### 6. Quality Checks
Before finalizing documentation, verify:
- [ ] NO placeholders `{...}` remain unfilled
- [ ] ALL input fields from code are documented
- [ ] ALL operations from code are documented
- [ ] ALL error messages from code are documented
- [ ] Examples use REAL field IDs from the code
- [ ] Security warnings included for sensitive operations
- [ ] Escalation criteria clearly defined
- [ ] MIT authentication requirements noted (if applicable)

### 7. Output Format
Generate documentation as:
- **HTML file** ready for IT Glue upload
- **File naming:** `{Bot-Name}-ASIO Bot Documentation.html`
- **Location:** `/.data/Output/Documentation/`

## Example Invocation
```
