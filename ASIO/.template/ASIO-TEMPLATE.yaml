asio_dependency_manifest:
  version: 3

  globals:
    sender_email: support@manganoit.com.au
    key_vault: mit-azu1-prod1-akv1
    http_bases:
      cwpsa: https://au.myconnectwise.net/v4_6_release/apis/3.0
      graph_v1: https://graph.microsoft.com/v1.0
      graph_beta: https://graph.microsoft.com/beta
    required_globals: [log, http_client, input, data_to_log, bot_name]
    mandatory_function: record_result
    error_handling_main: try_except_finally_with_result_data
    commit_prefixes: [AZ, AAD, EXO, SPO, TEAMS, INTUNE, M365, CWPSA, UTIL, WEBHOOK, CONFIG, DOCS]

  # Hard guards that prevent the mistakes you've seen
  guards:
    forbid_section_headers_and_banners: true            # Do NOT insert any "# === ..." or banner comments
    forbid_new_comments_in_code: true                   # Do NOT add comments like "Input: ..." / "Sanitize"
    forbid_unused_imports: true                         # Only import modules that are actually used in the code
    forbid_device_or_exo_when_not_triggered: true       # Do NOT add execute_powershell, get_exo_token, get_ad_user_data unless triggered
    enforce_token_flow_from_py_template: true           # Enforce the exact Graph token pattern in code (see code_contracts below)
    enforce_primary_domain_retrieval_after_token: true  # Require explicit PrimaryDomain retrieval even if token was acquired
    enforce_single_line_function_calls: true            # Keep calls on one line

  bundles:


    EmailMasking:
      description: Email sending policy aligned with execute_powershell masking
      triggers:
        requires_any_of:
          - uses: send_email
    # IMPORTANT: token is OPTIONAL; if missing, acquire via Key Vault using MIT
    inputs_optional: [MITGraphToken_xxxxxxxxxxxxx]
    functions_required:
      - get_graph_token_MIT
      - get_secret_value
      - get_tenant_id_from_domain
      - get_access_token
      - execute_api_call
    produces:
      - mit_graph_access_token
      - mit_graph_tenant_id
    validations:
      - ensure_sender_email_set: "{{globals.sender_email}}"
      - ensure_masking_regex_present:
          - pattern: "('|\")(eyJ[a-zA-Z0-9_-]{5,}?\\.[a-zA-Z0-9_-]{5,}?\\.([a-zA-Z0-9_-]{5,})?)\\1"
            replacement: "\\1***TOKEN-MASKED***\\1"
          - pattern: "('|\")([a-zA-Z0-9]{8,}-(clientid|clientsecret|password))\\1"
            replacement: "\\1***SECRET-MASKED***\\1"
            flags: ["IGNORECASE"]
      - ensure_masking_precedes_send_call: true

    CWPSA:
      description: ConnectWise PSA ticket and company context
      triggers:
        requires_any_of:
          - uses: cwpsa_company_context
          - uses: ticket_lookup
      inputs_required: [TicketNumber_xxxxxxxxxxxxx]
      integrations_required: [cw_psa]
      functions_required: [get_company_data_from_ticket, execute_api_call]
      produces: [company_identifier, company_name, company_id, company_types]
      validations:
        - ensure_http_integration: cw_psa
        - ensure_endpoint_prefix: "{{globals.http_bases.cwpsa}}"

    MITSafeguard:
      description: Extra authentication gate when company is MIT
      triggers:
        requires_all_of:
          - when: company_identifier == "MIT"
      inputs_required: [AuthCode_xxxxxxxxxxxxx]
      secrets_required: [MIT-AuthenticationCode]
      functions_required: [validate_mit_authentication, get_secret_value]
      produces: [mit_auth_ok]

    Graph:
      description: Microsoft Graph access and AAD identity resolution
      triggers:
        requires_any_of:
          - uses: aad_lookup
          - uses: graph_api_call
      # IMPORTANT: token is OPTIONAL; if missing, acquire via Key Vault using CWPSA company_identifier
      inputs_optional: [GraphToken_xxxxxxxxxxxxx]
      secrets_required:
        - MIT-PartnerApp-ClientID
        - MIT-PartnerApp-ClientSecret
        - "{company_identifier}-PrimaryDomain"
      functions_required:
        - get_graph_token
        - get_secret_value
        - get_tenant_id_from_domain
        - get_access_token
        - get_aad_user_data
        - execute_api_call
      produces:
        - graph_tenant_id
        - graph_access_token
        - user_id
        - user_email
        - user_sam
        - user_onpremisessyncenabled
      validations:
        - ensure_endpoint_prefix: "{{globals.http_bases.graph_v1}}|{{globals.http_bases.graph_beta}}"

    EXO:
      description: Exchange Online path (DISABLED unless explicitly required by instructions)
      triggers:
        requires_any_of:
          - uses: exo_action
          - uses: exo_ps_session
      inputs_optional: [ExoToken_xxxxxxxxxxxxx]
      secrets_required:
        - "{company_identifier}-ExchangeApp-ClientID"
        - "{company_identifier}-ExchangeApp-ClientSecret"
        - "{company_identifier}-PrimaryDomain"
      functions_required:
        - get_exo_token
        - get_secret_value
        - get_tenant_id_from_domain
        - get_access_token
        - execute_api_call
      produces: [exo_tenant_id, exo_access_token]

    DeviceAD:
      description: On-prem Active Directory lookups via PowerShell (DISABLED unless explicitly required)
      triggers:
        requires_any_of:
          - uses: device_ps_ad
          - uses: onprem_identity_lookup
      inputs_required: []
      secrets_required: []
      functions_required: [execute_powershell, get_ad_user_data]
      runtime_requirements:
        - powershell_shell_present
        - active_directory_module_present
      produces: [ad_upn, ad_sam]

  # Contract the AI must follow in code (regex-like anchors are allowed if your framework supports them)
  code_contracts:
    email_masking_equivalence:
      must_contain_in_main_in_order:
        - "if company_identifier == 'MIT':"
        - "mit_graph_access_token = MITGraphToken_xxxxxxxxxxxxx"
        - "mit_graph_tenant_id = ''"
        - "else:"
        - "mit_graph_tenant_id, mit_graph_access_token = get_graph_token_MIT(log, http_client, vault_name)"
      forbid:
        - "if not mit_graph_token"
        - "execute_powershell("
        - "get_exo_token("
        - "get_ad_user_data("
      remove:
        - "if not mit_graph_token"
        - "execute_powershell("
        - "get_exo_token("
        - "get_ad_user_data("
      applies_when:
        - "uses: send_email"
      must_contain_any:
        - "re.sub(r\"('|\")(eyJ[a-zA-Z0-9_-]{5,}?\\.[a-zA-Z0-9_-]{5,}?\\.([a-zA-Z0-9_-]{5,})?)\\1\", r\"\\1***TOKEN-MASKED***\\1\","
        - "re.sub(r\"('|\")([a-zA-Z0-9]{8,}-(clientid|clientsecret|password))\\1\", r\"\\1***SECRET-MASKED***\\1\","
      notes:
        - Apply masks to email body and headers before the send call; preserve surrounding quotes

    graph_token_flow_py_template:
      must_contain_in_main_in_order:
        - 'company_identifier, company_name, company_id, company_type = get_company_data_from_ticket(log, http_client, cwpsa_base_url, ticket_number)'
        - 'if company_identifier == "MIT":'
        - 'if graph_token:'
        - 'graph_access_token = graph_token'
        - 'graph_tenant_id = ""'
        - 'else:'
        - 'graph_tenant_id, graph_access_token = get_graph_token(log, http_client, vault_name, company_identifier)'
        - 'azure_domain = get_secret_value(log, http_client, vault_name, f"{company_identifier}-PrimaryDomain")'
        - 'aad_user_result = get_aad_user_data(log, http_client, msgraph_base_url, user_identifier, graph_access_token)'
      forbid:
        - 'if not graph_token'  # No mandatory token gate
        - 'execute_powershell('
        - 'get_exo_token('
        - 'get_ad_user_data('
      remove:
        - 'if not graph_token'  # No mandatory token gate
        - 'execute_powershell('
        - 'get_exo_token('
        - 'get_ad_user_data('

    imports_policy:
      template_contains_all_imports: true                     # Template keeps all possible imports for reference
      actual_scripts_import_only_used: true                   # Actual scripts should only import modules they use
      core_always_allowed: [sys, random, re, os, time, urllib.parse, requests]
      conditional_imports:
        - modules: [subprocess]
          when: uses_execute_powershell
        - modules: [traceback, json]
          when: uses_error_handling_or_json
        - modules: [pandas]
          when: uses_data_processing
        - modules: [io, base64, hmac, hashlib, string]
          when: uses_crypto_or_encoding
        - modules: [datetime, timedelta, timezone, defaultdict]
          when: uses_advanced_data_structures
      must_keep_cw_rpa_imports: true

  interactions:
    precedence:
      - CWPSA
      - MITSafeguard
      - Graph
      - EXO
      - DeviceAD
    notes:
      - Always start with CWPSA to resolve company_identifier from the ticket.
      - If company_identifier == "MIT", MITSafeguard must pass before any Graph token acquisition.
      - Graph: use input token if present, otherwise acquire via Key Vault (PartnerApp secrets + PrimaryDomain → tenant → token).
      - Even after token acquisition, explicitly fetch PrimaryDomain again as a distinct step (auditable).

  inputs_policy:
    always_required: [TicketNumber_xxxxxxxxxxxxx, User_xxxxxxxxxxxxx]

    conditional:
      - when: company_identifier == "MIT"
        require: [AuthCode_xxxxxxxxxxxxx]
    forbidden_when_unused: []
    input_naming_rules:
      - preserve_existing_ids: true  # If input already has specific ID (_1234567890), keep it
      - template_uses_generic: true  # Template uses _xxxxxxxxxxxxx as placeholder
      - actual_scripts_use_specific: true  # Actual scripts use specific IDs from schema

  environment_policy:
    Cloud:
      conda:
        protected_block_required: true
      allowed_additions_below_protected: [openai, pandas, numpy]
    Device:
      conda:
        protected_block_required: true
      allowed_additions_below_protected: [pandas, numpy]

  formatting_policy:
    function_calls_single_line: true
    powershell_block_indent:
      ps_code_indent_spaces: 6
      backtick_continuation_indent_spaces: 4
      here_string_indent_spaces: 6
    no_comments_in_ps_blocks: true

  validations:
    - ensure_globals_present: "{{globals.required_globals}}"
    - ensure_mandatory_function_present: "{{globals.mandatory_function}}"
    - ensure_main_has_try_except_finally_with_result_data
    - ensure_no_new_functions_unless_instructions_allow
    - ensure_tokens_only_allowed_names: ["graph_token", "exo_token"]
    - ensure_record_result_only_sets_success_or_warning
    - ensure_no_forbidden_imports_if_unused
    - ensure_no_headers_or_comments_injected

execution_plan:
  steps:
    - CWPSA.resolve_company_context
    - if company_identifier == "MIT": MITSafeguard.validate_auth
    - if uses: send_email: EmailMasking.use_mit_graph_token(mit_graph_access_token := MITGraphToken_xxxxxxxxxxxxx, mit_graph_tenant_id := "")
    - Graph.token_path:
        choose:
          - when: GraphToken_xxxxxxxxxxxxx is present
            do:
              - Graph.use_input_token(graph_access_token := GraphToken_xxxxxxxxxxxxx, graph_tenant_id := "")
          - otherwise:
            do:
              - Graph.acquire_via_key_vault(get_graph_token)
    - Graph.retrieve_primary_domain_secret_explicitly
    - Graph.resolve_user(get_aad_user_data)
    - Operation.dispatch_or_task_logic
    - finalize.log_result_data
